"""
                                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó
                                ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë
                                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
                                ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë
                                ‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë
                                ‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë

                                ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†Å‚£Ä‚£§‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚£ø
                                ‚£ø‚£ø‚£ø‚£ø‚†ã‚†Å‚†Ä‚†Ä‚†∫‚†ø‚¢ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£ø
                                ‚£ø‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£§‚£§‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚£¶‚£Ñ‚†Ä‚†Ä
                                ‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£ø‚†è‚£ø‚£ø‚£ø‚£ø‚£ø‚£Å‚†Ä‚†Ä‚†Ä‚†õ‚†ô‚†õ‚†ã‚†Ä‚†Ä
                                ‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†ò‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†á‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†ò‚¢ø‚£ø‚£ø‚£ø‚£Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚†Å‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚†Ä‚£ê‚££‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚†õ‚†Ä‚†å‚†ª‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚†Ä‚†Ä‚†Ä‚£∂‚£Æ‚£Ω‚£∞‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢ø‚£§‚†Ñ‚¢†‚£Ñ‚¢π‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£∂‚£∂‚£æ‚£ø‚£ø‚°Ü‚¢ª‚£ø‚£ø‚†É‚¢†‚†ñ‚†õ‚£õ‚£∑‚†Ä
                                ‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£ù‚°ª‚†ø‚†ø‚¢É‚£Ñ‚£≠‚°ü‚¢Ä‚°é‚£∞‚°∂‚£™‚£ø‚†Ä
                                ‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚†ü‚£õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚°ø‚¢Å‚£æ‚£ø‚¢ø‚£ø‚£ø‚†è‚†Ä
                                ‚†Ä‚†Ä‚†Ä‚£ª‚£ø‚°ü‚†ò‚†ø‚†ø‚†é‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£µ‚£ø‚£ø‚†ß‚£∑‚†ü‚†Å‚†Ä‚†Ä
                                ‚°á‚†Ä‚†Ä‚¢π‚£ø‚°ß‚†Ä‚°Ä‚†Ä‚£Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚°á‚†Ä‚†Ä‚†Ä‚¢ª‚¢∞‚£ø‚£∂‚£ø‚°ø‚†ø‚¢Ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ª‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
                                ‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ø‚†ü‚£Å‚£¥‚£æ‚£ø‚£ø‚†ø‚†ø‚£õ‚£ã‚£•‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚£ø‚°Ä
                                        source code by genesisgir
                                    
                            manipulate images and get color RGBA values and more!
"""

# import modules
import os, random, sys, traceback
import pyinputplus as pyip
from PIL import ImageColor
import logging, logging.handlers

def logger(): # GenesisGir's typical logger preset! ü™µ
    
    # importing modules
    import logging, logging.handlers
    from logging.handlers import SMTPHandler
    
    # create the logger and set severity
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG) # set logger level

    # create handles and set their severity
    
    # File Handlers
    file_handler = logging.FileHandler( 
    filename = r"Scrap-Yard\Labs-March-2023\pillowXKO01\pillowlogger.log",
    mode = 'w', # filemode 
    encoding = 'utf-8', # set encoding format
    delay = False, 
    errors = None)
    file_handler.setLevel(logging.DEBUG) # severity level


    
    # create formatter
    formatter = logging.Formatter("%(asctime)s [%(name)s] [%(levelname)s] [Lvl:%(levelno)s] [%(funcName)s] [%(lineno)d] %(message)s",
    datefmt='%m/%d/%Y %I:%M:%S %p')

    # add formatter to handles
    file_handler.setFormatter(formatter)

    # adding the handler
    logger.addHandler(file_handler)
    
    return logger
    
# logger variable
logger = logger()

# except var
exception_message = traceback.format_exc()


# method
def colour():
    """ # color()
    Returns the RBGA values of a color user has set or a random one from a list data type.
    """
    
    # colors list
    colors = ['RED', 'GREEN', 'BLUE', 'PINK', 'YELLOW', 'ORANGE', 'WHITE', 'BLACK']
    
    # color sunshine machine option stirs
    option = ['Choose your own colour', 'Generate a random colour', 'Exit Color Sunshine Machine v1.0.0']
    
    # colour  prompt
    while True:
        
        # exception handling
        try: # check for exceptions
            # user input
            resp = pyip.inputMenu(
                prompt='Colour Sunshine machine v1.0.0 \n', 
                choices=[option[0], option[1], option[2]],
                numbered=True, timeout=5.1)

            # conditionals
            if resp == option[0]: # user color
            
                while True:
                
                # exception handling
                    try:

                        # user input
                        resp = input('What colour would you like to get RGBA values from? \n')
                        print()

                        # user color value
                        user_colour = resp

                        # return user RGBA color values 
                        rgba_values = ImageColor.getcolor(color=user_colour, mode='RGBA')

                        # color output
                        message = print("The RGBA values of the colour %s are %s! \n" %(resp, rgba_values))

                        # [INFO] [20]
                        logger.info("User generated a colour: %s and the RGBA values were %s" %(user_colour, rgba_values))

                        break
                    
                    except: # invalid
                        # display to user they have entered invalid chars
                        print('Invalid characters, try again! \n')
                        
                        # [INFO] [20]
                        logger.info("User has entered invalid characters: %s" %(exception_message))
                        continue
                    continue

            elif resp == option[1]: # generate random color

                # exception handling
                try:
                    # random colour
                    rand_color = random.choice(seq=colors)

                    # return arbitrary RGBA colour values
                    rgba_values = ImageColor.getcolor(color=rand_color, mode='RGBA')

                    # color output
                    message = print("The RGBA values of the color %s are %s! \n" %(rand_color, rgba_values))

                    # [INFO] [20]
                    logger.info("A random colour was generated: %s and the RGBA values were %s" %(rand_color, rgba_values))
                    continue
                
                except:
                    
                    # [ERROR] [40]
                    logger.error("An exception has occured colour could not be generated: %s" %(exception_message))
                    pass
                
            elif resp == option[2]: # exit program
                print('Thank you for using Colour Sunshine Machine!')
                sys.exit()

            else:
                pass
        
        except:
            
            # [ERROR] [40]
            logger.error("An exception has occured: %s" %(exception_message))
            pass
    
# init
colour()